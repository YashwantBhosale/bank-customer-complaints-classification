database_user = yashwantbhosale07
password = MhlUoNi0hCeArHSG
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



@app.route('/predict', methods=['POST'])
def predict():
    try:
        data = request.get_json(force=True)  # Ensure JSON format
        
        # Ensure that 'text' exists in the incoming data
        if 'text' not in data:
            return jsonify({'error': 'No text field found in input'}), 400
        
        token = request.headers.get('Authorization')
        if not token:
            return jsonify({'error': 'No token provided'}), 401
        
        db = client['bank-complaints']
        collection = db['complaints']
        users_collection = db['users']
        
        # Decode and validate the JWT
        try:
            decoded_token = jwt.decode(token.split(" ")[1], SECRET_KEY, algorithms=['HS256'])
            user = users_collection.find_one({'_id': ObjectId(decoded_token['user_id'])})
            if not user:
                return jsonify({'error': 'User not found'}), 404
        except jwt.ExpiredSignatureError:
            return jsonify({'error': 'Token has expired'}), 401
        except jwt.InvalidTokenError:
            return jsonify({'error': 'Invalid token'}), 401
        
        # Make a prediction using the Hugging Face API
        hf_api_url = "https://api-inference.huggingface.co/models/bank-complaints-classification"  # Replace with your model name
        headers = {
            "Authorization": f"Bearer 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"  # Replace with your Hugging Face API token
        }
        response = requests.post(hf_api_url, headers=headers, json={"inputs": data['text']})
        
        # Check if the request was successful
        if response.status_code != 200:
            return jsonify({'error': 'Prediction failed', 'details': response.json()}), response.status_code
        
        prediction = response.json()  # Assuming the API returns the prediction in JSON format
        
        # Create a complaint record
        complaint = {
            'user_id': str(user['_id']),  # Convert ObjectId to string
            'text': data['text'],
            'prediction': prediction
        }
        
        # Insert into MongoDB
        collection.insert_one(complaint)
        print(f"Inserted complaint with prediction: {prediction}")
        
        return jsonify({'prediction': prediction}), 200
    
    except Exception as e:
        return jsonify({'error': str(e)}), 500
